import React, { useState, useEffect } from "react";
import Footer from "../components/Footer";
import Header from "../components/Header";
import "../styles/components/team.css";
import "../styles/components/free-lesson-form.css";

const Team = () => {
    const [instructors, setInstructors] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [showModal, setShowModal] = useState(false);
    const [selectedInstructor, setSelectedInstructor] = useState(null);
    const [formData, setFormData] = useState({
        name: '',
        phone: '',
        instructor: ''
    });
    const [isSubmitting, setIsSubmitting] = useState(false);

    useEffect(() => {
        const fetchInstructors = async () => {
            try {
                const response = await fetch("http://localhost:8080/api/instructors", {
                    headers: {
                        Accept: "application/json",
                    },
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                setInstructors(data);
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤:", err);
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };

        fetchInstructors();
    }, []);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if (!/^[\d\+]{7,15}$/.test(formData.phone)) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
            setIsSubmitting(false);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        const lastSubmission = localStorage.getItem('lastFormSubmit');
        if (lastSubmission && Date.now() - lastSubmission < 30000) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π');
            setIsSubmitting(false);
            return;
        }

        try {
            const botToken = '7947163456:AAF_DkDFYNSjrcHdGquyJHiYBFEr_ax-6PI';
            const chatId = '1188950273';
            const text = `üìå *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –≤ –∞–≤—Ç–æ—à–∫–æ–ª—É McQueen*\n
üë§ *–ò–º—è:* ${formData.name}\n
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.phone}\n
üë®‚Äçüè´ *–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:* ${formData.instructor}\n
üïí *–í—Ä–µ–º—è:* ${new Date().toLocaleString()}`;

            const response = await fetch(
                `https://api.telegram.org/bot${botToken}/sendMessage?chat_id=${chatId}&parse_mode=Markdown&text=${encodeURIComponent(text)}`
            );

            if (response.ok) {
                alert('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
                setFormData({ name: '', phone: '', instructor: '' });
                setShowModal(false);
                localStorage.setItem('lastFormSubmit', Date.now());
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } finally {
            setIsSubmitting(false);
        }
    };

    const openModal = (instructor) => {
        setSelectedInstructor(instructor);
        setFormData(prev => ({
            ...prev,
            instructor: instructor.FullName
        }));
        setShowModal(true);
    };

    const closeModal = () => {
        setShowModal(false);
        setSelectedInstructor(null);
    };

    return (
        <div className="team-page" style={{ backgroundColor: "#F7F4E1" }}>
            <Header />
            <main className="team-container">
                <h2 className="team-title">–ù–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã</h2>

                {loading && <div className="loading-message">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>}

                {error && (
                    <div className="error-message">
                        <p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö</p>
                        <p>{error}</p>
                        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π</p>
                    </div>
                )}

                {!loading && !error && (
                    <div className="instructors-grid">
                        {instructors.length > 0 ? (
                            instructors.map((instructor) => (
                                <div key={instructor.ID} className="instructor-card">
                                    <div className="instructor-photo">
                                        <img
                                            src={instructor.photoURL || "/images/default-instructor.jpg"}
                                            alt={instructor.FullName}
                                        />
                                    </div>
                                    <div className="instructor-info">
                                        <h3>{instructor.FullName}</h3>
                                        <p className="experience">
                                            <strong>–°—Ç–∞–∂:</strong> {instructor.ExperienceYears} –ª–µ—Ç
                                        </p>
                                        <p className="contact">
                                            <strong>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</strong> {instructor.Phone}, {instructor.Email}
                                        </p>
                                        <button
                                            className="signup-button"
                                            onClick={() => openModal(instructor)}
                                        >
                                            –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ
                                        </button>
                                    </div>
                                </div>
                            ))
                        ) : (
                            <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞—Ö</p>
                        )}
                    </div>
                )}

                {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ */}
                {showModal && (
                    <div className="modal-overlay">
                        <div className="modal-content">
                            <button className="close-modal" onClick={closeModal}>√ó</button>
                            <h3>–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ —Å {selectedInstructor?.FullName}</h3>
                            <form onSubmit={handleSubmit}>
                                <div className="form-group">
                                    <label htmlFor="name">–í–∞—à–µ –∏–º—è</label>
                                    <input
                                        type="text"
                                        id="name"
                                        name="name"
                                        value={formData.name}
                                        onChange={handleChange}
                                        required
                                        minLength="2"
                                    />
                                </div>
                                <div className="form-group">
                                    <label htmlFor="phone">–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω</label>
                                    <input
                                        type="tel"
                                        id="phone"
                                        name="phone"
                                        value={formData.phone}
                                        onChange={handleChange}
                                        required
                                        pattern="[\d\+]{7,15}"
                                        title="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 7 –¥–æ 15 —Ü–∏—Ñ—Ä"
                                    />
                                </div>
                                <input
                                    type="hidden"
                                    name="instructor"
                                    value={formData.instructor}
                                />
                                <button
                                    type="submit"
                                    className="submit-btn"
                                    disabled={isSubmitting}
                                >
                                    {isSubmitting ? (
                                        <span>–û—Ç–ø—Ä–∞–≤–∫–∞...</span>
                                    ) : (
                                        <span>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</span>
                                    )}
                                </button>
                            </form>
                        </div>
                    </div>
                )}
            </main>
            <Footer />
        </div>
    );
};

export default Team;